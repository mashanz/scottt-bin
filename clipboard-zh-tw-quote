#!/usr/bin/env python2
# vim: set fileencoding=utf8 :

# Add quotation marks to text according to how Chinese script is used in Taiwan (zh-tw)
# 「」,  「」 -> 『』
# copy content from X11 PRIMARY selection to CLIPBOARD

import sys
import os
import subprocess
import optparse
import cgi

try:
    import pygtk
except ImportError:
    # Fedora 23+
    #if not os.path.isdir('/usr/lib64/pygtk/2.0'):
        #    raise
    pygtklibdir = os.path.join('usr', 'lib64', 'pygtk', '2.0')
    sys.path.insert(0, pygtklibdir)
    print('pre 2nd import')
    import pygtk
pygtk.require('2.0')
import gtk

def program_name():
    return os.path.basename(sys.argv[0])

def clipboard_get_text(selection):
    'return textual data from the X11 clipboard. @selection should be "PRIMARY" or "CLIPBOARD"'
    clipboard = gtk.Clipboard(selection=selection)
    return clipboard.wait_for_text()

def clipboard_set_text(text, selection):
    clipboard = gtk.Clipboard(selection=selection)
    clipboard.set_text(text)
    # make the data stick around after this process exits
    clipboard.store()

main_function_list = []

def main_function(func):
    global main_function_list
    main_function_list.append(func)
    return func

@main_function
def clipboard_zh_tw_quote(args):
    op = optparse.OptionParser()
    (options, args) = op.parse_args(args)
    t = clipboard_get_text('PRIMARY')
    t = t.replace('「', '『')
    t = t.replace('」', '』')

    t = ''.join(['「' , t, '」'])
    clipboard_set_text(t, 'CLIPBOARD')

@main_function
def clipboard_html_escape(args):

    def print_usage_xit():
        sys.stderr.write('usage: %s [FILE]\n' % (program_name(),))
        sys.exit(2)

    op = optparse.OptionParser()
    (options, args) = op.parse_args(args)
    if len(args) == 0:
        t = clipboard_get_text('PRIMARY')
    elif len(args) == 1:
        t = open(args[0]).read()
    else:
        print_usage_exit()

    t = cgi.escape(t)
    clipboard_set_text(t, 'CLIPBOARD')

def main(args):
    def to_command_name(s):
        return s.replace('_', '-')

    name_to_function = dict( (to_command_name(x.__name__), x)
                            for x in main_function_list )
    return name_to_function[program_name()](args)

if __name__ == '__main__':
    main(sys.argv[1:])
