#!/usr/bin/gdb --python
# vim: set filetype=python:

# disassemble a funtion from an executable with GDB

import sys
import optparse

import gdb

def main(args):
    p = optparse.OptionParser(usage=('%prog EXECUTABLE NAME-or-ADDRESS [NAME-or-ADDRESS ...]\n'
                                     'Use gdb to disassemble symbolic names or memory addresses from a program'),
                              option_list=[
        optparse.Option('-r', '--no-raw-instructions', action='store_true',
                        help="don't show the raw instructions in hex next to the assembler"),
        optparse.Option('--no-header', action='store_true',
                        dest='no_header',
                        help="don't show \"Dump of ...\" headers and footers even when disassembling multiple functions"),
        optparse.Option('-s', '--source', action='store_true',
                        dest='source',
                        help='include source lines'),
    ])

    (options, args) = p.parse_args(args)
    try:
        (exe, functions) = (args[0], args[1:])
        if (not exe) or (not functions):
            p.print_usage()
            sys.exit(2)
    except IndexError:
        p.print_usage()
        sys.exit(2)

    if len(functions) == 1:
        # behave like grep: don't show file names when only one file is specified on the command line
        options.no_header = True

    gdb.execute('file %s' % (exe,))
    for i in functions:
        dis_options = '/'
        if not options.no_raw_instructions:
            dis_options += 'r'
        if options.source:
            dis_options += 'm'
        try:
            o = gdb.execute('disassemble %s %s' % (dis_options, i), to_string=True)
        except gdb.error, e:
            # Let's hope these GDB error message strings are stable ..
            if not e.message.startswith('No symbol table is loaded'):
                raise
            sys.stderr.write("gdbdis: %s: can't find symbol table\n" % (exe,))
            if exe.startswith('/usr/bin') or exe.startswith('/bin'):
                sys.stderr.write('\ttry debuginfo-install\n')
            sys.exit(3)

        if options.no_header:
            i = o.find('\n')
            j = o.rfind('\n')
            j = o.rfind('\n', 0, j)
            o = o[i+1:j+1]
        sys.stdout.write(o)

if __name__ == '__main__':
    #NOTE: gdb breaks sys.argv[0] in the way it embeds Python
    # ./gdbdis -> sys.argv: ['']
    # ./gdbdis 0 1 2 -> sys.argv: ['0', '1', '2']
    sys.argv = [ 'gdbdis' ] + sys.argv
    main(sys.argv[1:])
