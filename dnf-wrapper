#!/usr/bin/env python3

import sys
import os
import subprocess
import pprint

main_function_map = {}

def main_function(func):
    global main_function_map
    main_function_map[func.__name__.replace('_','-')] = func
    return func

@main_function
def din(args):
    r = subprocess.call(['sudo', 'dnf', 'install', '-y'] + args)
    sys.exit(r)

@main_function
def dinlocal(args):
    r = subprocess.call(['sudo', 'dnf', 'install', '-y'] + args)
    sys.exit(r)

@main_function
def dre(args):
    r = subprocess.call(['sudo', 'dnf', 'remove', '-y'] + args)
    sys.exit(r)

@main_function
def dgin(args):
    r = subprocess.call(['sudo', 'dnf', 'group', 'install', '-y'] + args)
    sys.exit(r)

@main_function
def dupdate(args):
    r = subprocess.call(['sudo', 'dnf', 'update', '-y', '--best', '--allowerasing'] + args)
    sys.exit(r)

@main_function
def dlist(args):
    r = subprocess.call(['sudo', 'dnf', 'list'] + args)
    sys.exit(r)

@main_function
def dbuilddep(args):
    # requires 'dnf-plugins-core' to be installed
    r = subprocess.call(['sudo', 'dnf', 'builddep', '-y'] + args)
    sys.exit(r)

def main_function_dispatch(name, args):
    try:
        f = main_function_map[name]
    except KeyError:
        sys.stderr.write('%s is not a valid command name. Valid ones are:\n' % (name,))
        pprint.pprint(sorted(main_function_map.keys()), stream=sys.stderr)
        sys.exit(2)
    f(args)

def program_name():
    return os.path.basename(sys.argv[0])

if __name__ == '__main__':
    main_function_dispatch(program_name(), sys.argv[1:])
